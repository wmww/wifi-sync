#!/usr/bin/python3

import sys
import os
import platform
import math
import subprocess
import socket
import re
import json
import argparse
import time
from datetime import datetime
import xml.etree.ElementTree as ET
from typing import Optional, Any, Tuple

default_json_path = os.path.expanduser('~') + '/.config/wifi-sync/networks.json'
ignore_conn_types = ['802-3-ethernet', 'bridge', 'tun', 'vpn', 'loopback']

def escape_shell(arg_list: list[str]) -> list[str]:
    escaped_args: list[str] = []
    for arg in arg_list:
        if not re.match(r'^[\w\.\-\=\~\/\,]*$', arg):
            arg = "'" + arg.replace("'", "'"'"'"'"'"'"'") + "'"
        escaped_args.append(arg)
    return escaped_args

class Run:
    def __init__(self, arg_list: list[str], raise_on_fail=False):
        print('Running `' + ' '.join(escape_shell(arg_list)) + '`')
        p = subprocess.Popen(arg_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = p.communicate(None)
        self.stdout = stdout.decode('utf-8') if stdout != None else ''
        self.stderr = stderr.decode('utf-8') if stderr != None else ''
        self.exit_code = p.returncode
        if raise_on_fail and self.exit_code != 0:
            raise RuntimeError(
                '`' + ' '.join(arg_list) + '` exited with code ' + str(self.exit_code) + ':\n' + self.stderr)

def is_android() -> bool:
    return hasattr(sys, 'getandroidapilevel')

def is_linux() -> bool:
    return platform.system() == 'Linux' and not is_android()

def is_valid_time(time: float) -> bool:
    # If we're before 2000 or after 2050, something is wrong
    return time > 946684800.0 and time < 2524608000.0

class NetworkInfo:
    def __init__(
        self,
        sync: bool,
        name: Optional[str],
        ssid: str,
        nm_uuid: Optional[str],
        pswd_type: str,
        pswd: Optional[str],
        autoconnect: bool,
        source: str,
        created_at: Optional[float],
        last_seen_at: Optional[float],
        comment: Optional[str],
    ):
        if created_at is None:
            created_at = time.time()
        # parse() takes values stright from JSON, so we check types here
        assert isinstance(sync, bool), 'sync has invalid type'
        assert name is None or isinstance(name, str), 'name has invalid type'
        assert isinstance(ssid, str), 'ssid has invalid type'
        assert isinstance(pswd_type, str), 'pswd_type has invalid type'
        assert pswd is None or isinstance(pswd, str), 'pswd has invalid type'
        assert isinstance(autoconnect, bool), 'autoconnect has invalid type'
        assert isinstance(source, str), 'source has invalid type'
        assert is_valid_time(created_at), 'created_at is invalid'
        assert last_seen_at is None or is_valid_time(last_seen_at), 'last_seen_at is invalid'
        assert comment is None or isinstance(comment, str), 'comment has invalid type'
        self.sync = sync
        if name is None:
            name = ssid
        self.name: str = name
        self.ssid: str = ssid
        if pswd_type == 'open':
            assert pswd is None, 'Open networks can not have a password'
        elif pswd_type == 'wpa':
            pass
        else:
            raise AssertionError('Unknown password type \'' + pswd_type + '\'')
        self.nm_uuid = nm_uuid
        self.pswd_type: str = pswd_type
        self.pswd: Optional[str] = pswd
        self.autoconnect: bool = autoconnect
        self.source = source
        self.created_at: float = created_at
        self.last_seen_at: Optional[float] = last_seen_at
        self.comment = comment

    @staticmethod
    def parse(data: dict[str, Any]) -> 'NetworkInfo':
        return NetworkInfo(
            data.get('sync', True),
            data.get('name'),
            data['ssid'],
            None,
            data['pswd_type'],
            data.get('pswd'),
            data.get('autoconnect', True),
            data.get('source', 'unknown'),
            data.get('created_at', None),
            data.get('last_seen_at', None),
            data.get('comment', None),
        );

    def human_readable_created_at(self) -> str:
        return datetime.utcfromtimestamp(self.created_at).strftime('%b %d, %Y %H:%M UTC')

    def human_readable_last_seen_at(self) -> str:
        if self.last_seen_at is None:
            return 'unknown'
        else:
            return datetime.utcfromtimestamp(self.last_seen_at).strftime('%b %d, %Y %H:%M UTC')

    def to_dict(self) -> dict[str, Any]:
        '''For encoding to JSON'''
        data: dict[str, Any] = {}
        if not self.sync:
            data['sync'] = self.sync
        data['name'] = self.name
        data['ssid'] = self.ssid
        data['pswd_type'] = self.pswd_type
        if self.pswd is not None:
            data['pswd'] = self.pswd
        if not self.autoconnect:
            data['autoconnect'] = False
        data['source'] = self.source
        data['created_at'] = self.created_at
        data['readable_created_at'] = self.human_readable_created_at()
        if self.last_seen_at is not None:
            data['last_seen_at'] = self.last_seen_at
            data['readable_last_seen_at'] = self.human_readable_last_seen_at()
        if self.comment is not None:
            data['comment'] = self.comment
        return data

    def last_seen_at_or(self, default: float) -> float:
        return self.last_seen_at if self.last_seen_at is not None else default

    def __str__(self) -> str:
        return (
            ('' if self.sync else '| not synced\n') +
            '| name: ' + self.name + '\n' +
            '| SSID: ' + self.ssid + '\n' +
            '| type: ' + self.pswd_type + '\n' +
            ('' if self.pswd is None else '| password: ' + self.pswd + '\n') +
            ('' if self.autoconnect else '| autoconnect disabled\n') +
            '| source: ' + self.source + '\n' +
            '| created at: ' + self.human_readable_created_at() + '\n' +
            '| last seen at: ' + self.human_readable_last_seen_at() + '\n' +
            ('' if self.comment is None else '| comment: ' + self.comment + '\n')
        )

def format_network_list(title: str, networks: list[NetworkInfo]) -> str:
    result = title + ':\n'
    for network in networks:
        if len(networks) < 7:
            result += str(network) + '\n'
        else:
            result += '  ' + network.ssid + ' (' + network.human_readable_created_at() + ')\n'
    return result

class NetworkInterface:
    def __init__(self):
        self.current: Optional[List[NetworkInfo]] = None
        self.pending_remove: List[NetworkInfo] = []
        self.pending_add: List[NetworkInfo] = []

    def __str__(self) -> str:
        raise NotImplementedError()

    def with_update_applied(self, old: NetworkInfo, new: NetworkInfo) -> Optional[NetworkInfo]:
        '''
        Returns None if this interface doesn't care about the changes, or a network with the changes
        included (generally just new)
        '''
        raise NotImplementedError()

    def load(self) -> None:
        '''Loads the current state'''
        raise NotImplementedError()

    def commit(self) -> None:
        '''Saves and clears pending networks'''
        raise NotImplementedError()

    def get_current(self) -> list[NetworkInfo]:
        assert self.current is not None, str(self) + ' not loaded'
        return self.current

    def dedup(self) -> None:
        '''Prepare to remove duplicate networks'''
        for network in self.get_current():
            for other in self.get_current():
                if network != other and network.ssid == other.ssid:
                    # Keep the oldest one
                    if network.created_at < other.created_at:
                        keep, remove = network, other
                    else:
                        keep, remove = other, network
                    if remove not in self.pending_remove:
                        self.pending_remove.append(remove)

    def queue_network(self, network: NetworkInfo) -> None:
        if not network.sync:
            return
        '''Puts the network in pending if it's not already known'''
        to_remove: list[NetworkInfo] = []
        for known in self.get_current() + self.pending_add:
            if known.ssid == network.ssid:
                result = self.with_update_applied(known, network)
                if result is None:
                    return
                else:
                    to_remove.append(known)
                    network = result
        self.pending_remove += to_remove
        self.pending_add.append(network)

    def queue_all_networks(self, networks: list[NetworkInfo]) -> None:
        '''Puts any new networks in pending_add'''
        for network in networks:
            self.queue_network(network)

class Nmcli(NetworkInterface):
    def __init__(self) -> None:
        super().__init__()
        self.bin_path = '/usr/bin/nmcli'
        self.data_path = '/etc/NetworkManager/system-connections'
        Run([self.bin_path, '-v'], raise_on_fail=True)
        assert os.path.isdir(self.data_path), self.data_path + ' is not a directory'
        self.source = socket.gethostname() + ' (NetworkManager)'
        self.conn_id_re = re.compile(r'^connection\.id:\s*(.*)$', flags=re.MULTILINE)
        self.conn_uuid_re = re.compile(r'^connection\.uuid:\s*(.*)$', flags=re.MULTILINE)
        self.conn_type_re = re.compile(r'^connection\.type:\s*(.*)$', flags=re.MULTILINE)
        self.last_seen_at_re = re.compile(r'^connection\.timestamp:\s*(.*)$', flags=re.MULTILINE)
        self.ssid_re = re.compile(r'^802-11-wireless\.ssid:\s*(.*)$', flags=re.MULTILINE)
        self.psk_re = re.compile(r'^802-11-wireless-security\.psk:\s*(.*)$', flags=re.MULTILINE)
        self.key_mgmt_re = re.compile(r'^802-11-wireless-security\.key-mgmt:\s*(.*)$', flags=re.MULTILINE)
        self.autoconnect_no_re = re.compile(r'^.*\.autoconnect:\s*(no)$', flags=re.MULTILINE)

    def __str__(self) -> str:
        return self.source

    def with_update_applied(self, old: NetworkInfo, new: NetworkInfo) -> Optional[NetworkInfo]:
        if (
            old.ssid == new.ssid and
            old.pswd_type == new.pswd_type and
            old.pswd == new.pswd and
            old.autoconnect == new.autoconnect
        ):
            return None
        else:
            return new

    def name_list(self) -> list[str]:
        out = Run([self.bin_path, '-f', 'NAME', 'connection'], raise_on_fail=True)
        networks = [i.strip() for i in out.stdout.strip().split('\n')[1:]] # cut off "NAME" header
        return list(set(networks))

    def get_created_at(self, name: str, uuid: str) -> float:
        paths = [
            os.path.join(self.data_path, name + '-' + uuid + '.nmconnection'),
            os.path.join(self.data_path, name + '-' + uuid),
            os.path.join(self.data_path, name + '.nmconnection'),
            os.path.join(self.data_path, name),
        ]
        time = math.inf
        for path in paths:
            try:
                time = os.path.getmtime(path)
                break
            except FileNotFoundError:
                pass
            except PermissionError as e:
                raise RuntimeError(
                    str(e) + '\nyou may want to run:\n' +
                    'sudo chmod o+x ' + self.data_path
                )
        assert is_valid_time(time), 'Invalid time ' + str(time) + ' for network ' + name
        return time

    def parse_single_network(self, data: str) -> Optional[NetworkInfo]:
        conn_types = self.conn_type_re.findall(data)
        assert len(conn_types) == 1, 'Could not properly detect connection type'
        if conn_types[0] == '802-11-wireless':
            pass
        elif conn_types[0] in ignore_conn_types:
            return None
        else:
            raise AssertionError('Invalid connection type ' + conn_types[0])
        conn_ids = self.conn_id_re.findall(data)
        conn_uuids = self.conn_uuid_re.findall(data)
        last_seen_at_timestamps = self.last_seen_at_re.findall(data)
        ssids = self.ssid_re.findall(data)
        psks = self.psk_re.findall(data)
        key_mgmts = self.key_mgmt_re.findall(data)
        autoconnect_nos = self.autoconnect_no_re.findall(data)
        assert len(conn_ids) == 1, 'Could not properly detect connection ID'
        assert len(conn_uuids) == 1, 'Could not properly detect connection UUID'
        assert len(last_seen_at_timestamps) == 1, 'Could not properly detect last seen at timestamp'
        assert len(ssids) == 1, 'Could not properly detect SSID'
        assert len(psks) <= 1, 'Found more then one password'
        assert len(key_mgmts) <= 1, 'Found more then one key management:\n'
        psk = None
        if len(psks) == 1 and psks[0] != '--':
            psk = psks[0]
        pswd_type = None
        if len(key_mgmts) == 0:
            pswd_type = 'open'
        elif key_mgmts[0] == 'none':
            # This means WEP, which isn't supported
            # pswd_type = 'wep'
            return None
        elif key_mgmts[0] == 'wpa-psk':
            pswd_type = 'wpa'
        else:
            raise AssertionError('Unknown key management: ' + ' '.join(key_mgmts))
        autoconnect = len(autoconnect_nos) == 0
        created_at = self.get_created_at(conn_ids[0], conn_uuids[0])
        last_seen_at_or_0 = float(last_seen_at_timestamps[0])
        last_seen_at: Optional[float] = None
        if is_valid_time(last_seen_at_or_0):
            last_seen_at = last_seen_at_or_0
        return NetworkInfo(
            True,
            conn_ids[0],
            ssids[0],
            conn_uuids[0],
            pswd_type,
            psk,
            autoconnect,
            self.source,
            created_at,
            last_seen_at,
            None
        )

    def parse_network_list(self, names: list[str]) -> list[NetworkInfo]:
        out = Run([self.bin_path, '--show-secrets', 'connection', 'show'] + names, raise_on_fail=True)
        data = out.stdout.split('\n\n')
        networks = []
        for i in range(len(data)):
            network = self.parse_single_network(data[i])
            if network is not None:
                networks.append(network)
        return networks

    def load(self) -> None:
        print('Loading ' + str(self))
        names = self.name_list()
        print('Loading network details')
        self.current = self.parse_network_list(names)

    def install_network(self, n: NetworkInfo) -> None:
        args = [self.bin_path, 'connection', 'add',
            'type', 'wifi',
            'ifname', '*',
            'con-name', n.name,
            'ssid', n.ssid,
            'save', 'yes',
            'autoconnect', 'yes' if n.autoconnect else 'no']
        if n.pswd_type == 'open':
            pass
        elif n.pswd_type == 'wpa':
            args += ['802-11-wireless-security.key-mgmt', 'wpa-psk']
            if n.pswd is not None:
                args += ['802-11-wireless-security.psk', n.pswd]
        elif n.pswd_type == 'wep':
            raise AssertionError('WEP not yet supported')
        else:
            raise AssertionError('unknown type: ' + n.pswd_type)
        result = Run(args, raise_on_fail=True)
        print('Network added:\n' + str(n))

    def delete_network(self, n: NetworkInfo) -> None:
        assert n.nm_uuid is not None, 'Network to remove does not have an UUID'
        args = [self.bin_path, 'connection', 'delete', n.nm_uuid]
        result = Run(args, raise_on_fail=True)
        print('Network deleted:\n' + str(n))

    def commit(self) -> None:
        for network in self.pending_remove:
            self.delete_network(network)
        for network in self.pending_add:
            self.install_network(network)
        self.pending_add = []
        self.pending_remove = []
        self.current = None

def adb_server_running() -> bool:
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        # 5037 is the default socket of adb
        return s.connect_ex(('localhost', 5037)) == 0

def adb_wait_for_device() -> None:
    if not adb_server_running():
        # start-server must be run as root, at least on Ubuntu
        print('starting ADB server...')
        subprocess.run(['sudo', 'adb', 'start-server'], check=True)
    print('waiting for Android device...')
    subprocess.run(['adb', 'wait-for-device'], check=True)
    subprocess.run(['adb', 'root'], check=True)

def dequote(text: str) -> str:
    if text.startswith('"') and text.endswith('"'):
        text = text[1:-1].strip()
    return text

class Android(NetworkInterface):
    def __init__(self) -> None:
        super().__init__()
        self.running_on_device = is_android()
        if not self.running_on_device:
            adb_wait_for_device()
        self.source = self.run_on_android(
            ['getprop', 'ro.product.device'],
            raise_on_fail=True
        ).stdout.strip() + ' (Android)'

    def run_on_android(self, arg_list: list[str], raise_on_fail=False) -> Run:
        if self.running_on_device:
            return Run(['sudo'] + arg_list, raise_on_fail=raise_on_fail)
        else:
            return Run(['adb', 'shell'] + escape_shell(arg_list), raise_on_fail=raise_on_fail)

    def __str__(self) -> str:
        return self.source

    def with_update_applied(self, old: NetworkInfo, new: NetworkInfo) -> Optional[NetworkInfo]:
        if (
            old.ssid == new.ssid and
            old.pswd_type == new.pswd_type and
            old.pswd == new.pswd and
            old.autoconnect == new.autoconnect
        ):
            return None
        else:
            return new

    def load(self) -> None:
        # Load networks from a file because cmd wifi doesn't seem to support getting details of a specific network
        result = self.run_on_android(
            ['cat', '/data/misc/apexdata/com.android.wifi/WifiConfigStore.xml'],
            raise_on_fail=True
        ).stdout
        root = ET.fromstring(result)
        loaded: list[NetworkInfo] = []
        assert root.tag == 'WifiConfigStoreData'
        network_list = root.find('NetworkList')
        assert network_list is not None
        for network in network_list.iter('Network'):
            wifi_config = network.find('WifiConfiguration')
            assert wifi_config is not None
            ssid: Optional[str] = None
            pswd_type: Optional[str] = None
            pswd: Optional[str] = None
            autoconnect: Optional[bool] = None
            use_network = True
            for item in wifi_config.iter():
                name = item.get('name')
                if name == 'SSID':
                    assert item.text is not None
                    ssid = dequote(item.text)
                if name == 'ConfigKey':
                    assert item.text is not None
                    key_type = item.text.rsplit('"', 1)[-1]
                    if key_type == 'WPA_PSK':
                        pswd_type = 'wpa'
                    elif key_type == 'WPA_EAP':
                        # Don't deal with ToorCamp's weird network
                        use_network = False
                    elif key_type == 'NONE':
                        pswd_type = 'open'
                    else:
                        raise RuntimeError('Unknown ConfigKey key type: ' + key_type)
                if name == 'PreSharedKey' and item.text is not None:
                    pswd = dequote(item.text)
                if name == 'AutoJoinEnabled':
                    autoconnect = item.get('value') == 'true'
            if use_network:
                if ssid is None or pswd_type is None or autoconnect is None:
                    raise RuntimeError('failed to parse network ' + str(ssid))
                info = NetworkInfo(True, None, ssid, None, pswd_type, pswd, autoconnect, self.source, None, None, None)
                loaded.append(info)
        self.current = loaded

    def install_network(self, n: NetworkInfo) -> None:
        if n.pswd_type == 'open':
            android_type = 'open'
        elif n.pswd_type == 'wpa':
            android_type = 'wpa2'
        else:
            assert False, 'Invalid password type ' + str(n.pswd_type)
        args = ['cmd', 'wifi', 'add-network', n.ssid, android_type]
        if n.pswd is None:
            if n.pswd_type == 'wpa':
                print('WARNING: network ' + n.ssid + ' is type wpa but doesn\'t have a password, ignoring network')
                return
        else:
            args.append(n.pswd)
        if not n.autoconnect:
            args.append('-d')
        self.run_on_android(args, raise_on_fail=True)

    def delete_network(self, n: NetworkInfo) -> None:
        # Android often lists two versions of the same network with the same ID, put them in a set
        # so we only remove it once
        remove_set: set[int] = set()
        network_list_result = self.run_on_android(['cmd', 'wifi', 'list-networks'], raise_on_fail=True)
        network_list = network_list_result.stdout.strip().splitlines()[1:]
        for network_str in network_list:
            network_id_str, ssid_and_type = network_str.split(' ', 1)
            ssid = ssid_and_type.rsplit(' ', 1)[0].strip()
            if ssid == n.ssid:
                remove_set.add(int(network_id_str))
        for network_id in remove_set:
            self.run_on_android(['cmd', 'wifi', 'forget-network', str(network_id)], raise_on_fail=True)

    def commit(self) -> None:
        for network in self.pending_remove:
            self.delete_network(network)
        for network in self.pending_add:
            self.install_network(network)
        self.pending_add = []
        self.pending_remove = []
        self.current = None

class JsonFile(NetworkInterface):
    def __init__(self, path: str) -> None:
        super().__init__()
        self.path = path

    def __str__(self) -> str:
        return self.path

    def with_update_applied(self, old: NetworkInfo, new: NetworkInfo) -> Optional[NetworkInfo]:
        # JSON only saves with ~minute precision, so consider equal unless it's more than 200 seconds older
        if new.created_at - 200 > old.created_at:
            new.created_at = old.created_at
        if new.last_seen_at is None or (old.last_seen_at is not None and new.last_seen_at + 200 < old.last_seen_at):
            new.last_seen_at = old.last_seen_at
        if new.comment is None:
            new.comment = old.comment
        if (
            old.name == new.name and
            old.ssid == new.ssid and
            old.pswd_type == new.pswd_type and
            old.pswd == new.pswd and
            old.autoconnect == new.autoconnect and
            new.created_at == old.created_at and
            new.last_seen_at == new.last_seen_at and
            old.comment == new.comment
        ):
            return None
        else:
            return new

    def load(self) -> None:
        print('Loading JSON from', self.path)
        with open(self.path, "r") as f:
            contents = f.read()
        loaded = json.loads(contents)
        assert isinstance(loaded, list), self.path + ' does not contain a list'
        self.current = [NetworkInfo.parse(item) for item in loaded]

    def commit(self) -> None:
        if len(self.pending_add) == 0 and len(self.pending_remove) == 0:
            return
        print('Saving JSON to', self.path)
        output = [network for network in self.get_current() if network not in self.pending_remove] + self.pending_add
        output.sort(key=lambda network: network.created_at)
        contents = json.dumps([network.to_dict() for network in output], indent=2)
        with open(self.path, "w") as f:
            f.write(contents)
        self.pending_add = []
        self.pending_remove = []
        self.current = None

def make_system_interface(args: argparse.Namespace) -> NetworkInterface:
    if args.adb:
        assert is_linux(), '--adb should only be used on Linux'
        return Android()
    elif is_linux():
        return Nmcli()
    elif is_android():
        return Android()
    else:
        raise RuntimeError('Unsupported platform ' + platform.system())

def make_config_interface(args: argparse.Namespace) -> NetworkInterface:
    path = default_json_path
    if args.file is not None:
        path = args.file
    if path == default_json_path:
        os.makedirs(os.path.dirname(default_json_path), exist_ok=True)
    return JsonFile(path)

def make_interface(args: argparse.Namespace, interface: str):
    if interface == 'nm':
        return Nmcli()
    elif interface == 'android':
        return Android()
    elif interface == 'json':
        return make_config_interface(args)
    else:
        raise RuntimeError('Unknown interface ' + interface)

def load_all(args: argparse.Namespace) -> Tuple[NetworkInterface, NetworkInterface]:
    config = make_config_interface(args)
    config.load()
    system = make_system_interface(args)
    system.load()
    return config, system

def summerize(interface: NetworkInterface) -> None:
    if len(interface.pending_add) == 0 and len(interface.pending_remove) == 0:
        print('No new networks for ' + str(interface))
        return
    print(format_network_list('Networks to remove from ' + str(interface), interface.pending_remove))
    print(format_network_list('Networks to add to ' + str(interface), interface.pending_add))

def import_networks(args: argparse.Namespace):
    config, system = load_all(args)
    system.queue_all_networks(config.get_current())
    summerize(system)
    system.commit()

def export_networks(args: argparse.Namespace):
    config, system = load_all(args)
    config.queue_all_networks(system.get_current())
    summerize(config)
    config.commit()

def update_networks(args: argparse.Namespace):
    config, system = load_all(args)
    config.queue_all_networks(system.get_current())
    summerize(config)
    config.commit()
    config.load()
    system.queue_all_networks(config.get_current())
    summerize(system)
    system.commit()

def show_networks(args: argparse.Namespace):
    config, system = load_all(args)
    config.queue_all_networks(system.get_current())
    system.queue_all_networks(config.get_current())
    print(format_network_list('New networks from ' + str(config), system.pending_add))
    print(format_network_list('New networks from ' + str(system), config.pending_add))

def dedup_networks(args: argparse.Namespace):
    interface = make_interface(args, args.interface)
    interface.load()
    interface.dedup()
    print(format_network_list('Duplicate networks to remove from' + str(interface), interface.pending_remove))
    summerize(interface)
    interface.commit()

def main() -> None:
    parser = argparse.ArgumentParser(description='Save and load WiFi networks and passwords to JSON')
    parser.add_argument('-f', '--file', type=str, help='File to load networks from, default is ' + default_json_path)
    parser.add_argument('--adb', action='store_true', help='Connect to an Android phone via ADB, the config file will still be local')
    subparsers = parser.add_subparsers()
    interface_names = ['nm', 'android', 'json']
    # subparsers.required = True
    # subparsers.dest = 'command'

    subparser = subparsers.add_parser('import', help='Import WiFi networks from a JSON file')
    subparser.set_defaults(func=import_networks)

    subparser = subparsers.add_parser('export', help='Export WiFi networks to a JSON file')
    subparser.set_defaults(func=export_networks)

    subparser = subparsers.add_parser('update', help='Import and export')
    subparser.set_defaults(func=update_networks)

    subparser = subparsers.add_parser('show', help='Show all WiFi networks loaded from the JSON file and detected from system')
    subparser.set_defaults(func=show_networks)

    subparser = subparsers.add_parser('dedup', help='Remove duplicate networks')
    subparser.add_argument('interface', type=str, help='Interface to use, can be: ' + ', '.join(interface_names))
    subparser.set_defaults(func=dedup_networks)

    args = parser.parse_args()

    if not hasattr(args, 'func'):
        parser.print_help()
        exit(1)

    args.func(args)

if __name__ == '__main__':
    main()
